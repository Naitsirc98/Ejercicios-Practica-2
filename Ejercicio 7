.global _start
_start:
  movia sp, 0x007ffffc
  movia r2, 0x10000050
  movi r3, 0b0110
  stwio r3, 8(r2)
  movi r2, 0b010
  wrctl ienable, r2
  movi r2, 1
  wrctl status, r2
  movia r2, 0x10000000
  addi r3, r0, 1
  stwio r3, 0(r2)
MAIN: // bucle infinito principal
  call SWITCH_ON
  br MAIN

SWITCH_ON:
  addi sp, sp -16
  stw ra, 4(sp)
  stw r2, 8(sp)
  stw r3, 12(sp)
  stw r4, 16(sp)
  movia r2, 0x10000000 /* inicializar los leds rojos */
  movia r3, 50000 /* inicializar cuenta para el retardo temporal */
DELAY: 
  subi r3,r3,1
  bne r3, r0, DELAY /* bucle de retardo temporal */
  ldwio r3, 0(r2) /* obtener valor actual de los leds */
  ldw r4, DIRECTION(r0) /* obtener la dirección de movimiento */
  bne r4,r0,RIGHT /* salta si DIRECCION=1 , movimiento a derecha */
  slli r3,r3,1 /* desplaza el bit de encendido de los leds a la izquierda */
  movia r4,0x40000
  bne r3,r4,END /* comprueba si estaba encendido el led 18 */
  movi r3,1 /* empieza de nuevo con el led menos significativo */
  br END /* salto a la parte final de la rutina */
RIGHT:
  srli r3,r3,1 /* desplaza el bit de encendido de los led a la derecha */
  bne r3,r0,END /* salto si estaba encendido el led 1 */
  movia r3,0x20000 /* empieza de nuevo con el led mas significativo */
END: 
  stwio r3, 0(r2) /* enciende un led y apaga el resto */
  ldw ra, 4(sp) /* se recuperan registros de la pila */
  ldw r2, 8(sp)
  ldw r3, 12(sp)
  ldw r4, 16(sp)
  addi sp, sp, 16
  ret

.section .exceptions, "ax"
EXCEPTION_HANDLER:
  stw et, 0(sp) /* guardar et en la pila */
  subi sp, sp, 4
  rdctl et, ctl4 /* leer registro de interrupciones pendientes */
  beq et, r0, NO_INT
  subi ea, ea, 4 /* interrupción activada, se decrementa ea */
  subi sp, sp, 12 /* guardar registros en la pila */
  stw ea, 4(sp)
  stw ra, 8(sp)
  stw r2, 12(sp)
  andi r2, et, 0b10 /* se comprueba si la interrupción botón se ha activado */
  beq r2, r0, FINISH /* salta a FIN si no se ha activado interrupción IRQ #1 */
  call INPUT /* IRQ#1 activada, salta a rutina descrita en la siguiente transparencia */
FINISH:
  ldw ea, 4(sp) /* recuperar registros de la pila */
  ldw ra, 8(sp)
  ldw r2, 12(sp)
  addi sp, sp, 12
NO_INT:
  addi sp,sp,4 /* recuperar et de la pila */
  ldw et,0(sp)
  eret

INPUT: 
  addi sp, sp, -16 /* guardar registros en la pila */
  stw ra, 4(sp)
  stw r2, 8(sp)
  stw r3, 12(sp)
  stw r4, 16(sp)
  movia r2, 0x10000050 /* cargar la dirección base de los botones */
  ldwio r3, 0xC(r2) /* lee registro puerto y analiza qué boton generó interrupcion */
  stwio r0, 0xC(r2) /* reiniciar a 0 el registro de captura de interrupciones */
  andi r4,r3,0x2 /* comprobar botón KEY1 */
  beq r4,r0,BUTTON2
  movi r4, 1
  stw r4, DIRECTION(r0)
  br FINISH2
BUTTON2: andi r4,r3,0x4 /* comprobar botón KEY2 */
  beq r4,r0,FINISH2
  stw r0, DIRECTION(r0)
FINISH2: 
  ldw ra, 4(sp) /* recuperar registros de la pila */
  ldw r2, 8(sp)
  ldw r3, 12(sp)
  ldw r4, 16(sp)
  addi sp, sp, 16
  ret
  
  .data
DIRECTION:
  .word 0
.end

